import java.util.Objects;

public class Game {
    WindowAndDrawing windowAndDrawing;
    Map map;
    Snake snake;

    boolean SnakePositionCheck () {
    if (snake.getB() == 0 || snake.getB() == 14) return false;
    return snake.getG() > 1 && snake.getG() < 33;
}
void start() {
        while (true) {
            windowAndDrawing = new WindowAndDrawing();
            map = new Map(windowAndDrawing);
            snake = new Snake(map);
            while (SnakePositionCheck()) {
                try {
                    switch (windowAndDrawing.getKey(1)) {
                        case 37: if(windowAndDrawing.getKey(0) != 39 && windowAndDrawing.getKey(1) != windowAndDrawing.getKey(0)) left(); else right(); break;
                        case 38: if(windowAndDrawing.getKey(0) != 40 && windowAndDrawing.getKey(1) != windowAndDrawing.getKey(0)) up(); else down(); break;
                        case 39: if(windowAndDrawing.getKey(0) != 37 && windowAndDrawing.getKey(1) != windowAndDrawing.getKey(0)) right(); else left(); break;
                        case 40: if(windowAndDrawing.getKey(0) != 38 && windowAndDrawing.getKey(1) != windowAndDrawing.getKey(0)) down(); else up(); break;
                    }

                } catch (Throwable exc) {
                    return;
                }
                snake.MoveTheSnake();
                Apple();
                map.MapDraw();
                try {
                    Thread.sleep(450);
                } catch (Throwable exc) {
                    System.out.println("Ooooops, we have the problem)");
                }
            }
            windowAndDrawing.EndSplashScreen();
        }
}

    void left () throws Throwable {
        if (Objects.equals(map.getElementField(snake.getB(),snake.getG() - 2), "o")) throw new Throwable();
        snake.setG(snake.getG() - 2);
    }
    void right () throws Throwable {
        if (Objects.equals(map.getElementField(snake.getB(),snake.getG() + 2), "o")) throw new Throwable();
        snake.setG(snake.getG() + 2);
    }
    void up () throws Throwable {
        if (Objects.equals(map.getElementField(snake.getB() - 1,snake.getG()), "o")) throw new Throwable();
        snake.setB(snake.getB() - 1);
    }
    void down () throws Throwable {
        if (Objects.equals(map.getElementField(snake.getB() + 1,snake.getG()), "o")) throw new Throwable();
        snake.setB(snake.getB() + 1);
    }
    void Apple () {
        for (int x = 0; x < map.getLenghtField(-1); x++) {
            for (int y = 0; y < map.getLenghtField(x); y++) {
                if (Objects.equals(map.getElementField(x, y), "q")) return;
            }
        }
        snake.addElementSnake();
        while (true) {
            int b1 = 2 + (int) (Math.random() * 12);
            int g1 = 2 + (int) (Math.random() * 32);
            if (!Objects.equals(map.getElementField(b1, g1), "o")) {
                if ((g1 % 2) == 0) {
                    map.setElementField(b1, g1, "q");
                    return;
                }
            }
        }
    }
}
